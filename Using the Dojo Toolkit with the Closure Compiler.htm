<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title>Using the Dojo Toolkit with the Closure Compiler in Advanced
Optimizations Mode</title>

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"Droid Sans Mono";
	panose-1:2 11 6 9 3 8 4 2 2 4;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@PMingLiU";
	panose-1:2 2 5 0 0 0 0 0 0 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;}
h2
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:Arial;
	font-style:italic;}
h3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:normal;
	font-style:italic;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
span.MsoFootnoteReference
	{vertical-align:super;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.Notes, li.Notes, div.Notes
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.75in;
	margin-bottom:.0001pt;
	text-indent:-.5in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.Code, li.Code, div.Code
	{margin:0in;
	margin-bottom:.0001pt;
	text-autospace:none;
	font-size:10.0pt;
	font-family:Cambria;
	font-weight:bold;}
span.CodeChar
	{font-family:Cambria;
	font-weight:bold;}
p.CodeSection, li.CodeSection, div.CodeSection
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:.5in;
	text-indent:-.5in;
	page-break-after:avoid;
	background:#E6E6E6;
	border:none;
	padding:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.CodeBlock, li.CodeBlock, div.CodeBlock
	{margin-top:0in;
	margin-right:27.35pt;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	background:#E9FFFF;
	text-autospace:none;
	border:none;
	padding:0in;
	font-size:10.0pt;
	font-family:Cambria;
	font-weight:bold;}
p.StyleCodeBlockSeaGreen, li.StyleCodeBlockSeaGreen, div.StyleCodeBlockSeaGreen
	{margin-top:0in;
	margin-right:27.35pt;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	background:#E9FFFF;
	text-autospace:none;
	border:none;
	padding:0in;
	font-size:10.0pt;
	font-family:Cambria;
	color:green;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:612.1pt 792.1pt;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=Section1>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'><b><span
style='font-size:24.0pt'>Dojo – The Only JavaScript Library</span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b><span
style='font-size:24.0pt'>Compatible with The Closure Compiler</span></b></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:20.0pt'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:20.0pt'>(other than the <i>Closure Library</i>, that is)</span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:24.0pt'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><i><span
style='font-size:24.0pt'>or</span></i></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:24.0pt'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><b><span
style='font-size:24.0pt'>How to Use the Closure Compiler</span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b><span
style='font-size:24.0pt'>in Advanced Mode</span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b><span
style='font-size:24.0pt'>with the Dojo Toolkit</span></b></p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt'>Author: Stephen Chung (<a
href="mailto:Stephen.Chung@intexact.com">Stephen.Chung@intexact.com</a>)</span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt'>Last Edited: 2011-03-06</span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-size:14.0pt'>&nbsp;</span></p>

<span style='font-size:12.0pt;font-family:"Times New Roman"'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal><b><span style='font-size:16.0pt;font-family:Arial'>Table of
Contents</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429501">Preamble<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429502">Design
Concept<span style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429503">Caveat<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429504">Who is This
For<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429505">Why Closure
Compiler<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429506">The Catch<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429507">The Special
Build Process<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429508">Step 1:
Invoking the special Build process<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429509">Step 2:
Constructing the Build profile<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429510">Step 3:
Running the Compiler on the Build Output<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429511">Step 4:
Debugging Builds<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429512">Step 5:
Required “Externs”<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429513">Watch-Out’s<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429514">Avoid names
with “$”<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429515">JsDoc’s<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429516">dojo._hasResource,
dojo._loadedModules<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429517">dojo.provide<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429518">Properties
accessed via string name<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429519">dojo.connect,
this.connect, dojo.hitch dojo.subscribe, this.subscribe<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429520">Dojo classes
and dojo.declare<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429521">Necessary
Modifications to Dojo Build Scripts<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429522">Necessary
Modifications to Dojo Core<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429523">Public
functions missing argument type comments<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429524">Incorrect/incomplete
argument type comments<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429525">Eliminate
property accesses via string value<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429526">Other
Necessary Code modifications<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429527">Necessary
Modifications to Dijit’s<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429528">Eliminate
property accesses via string value<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span><span
style='color:windowtext;display:none;text-decoration:none'></span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429529">Handle
templated widgets<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429530">Necessary
Modifications to dojox.mobile<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429531">Eliminate
properties passed/created by string<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429532">Recommended
Modifications to Dojo Core, Dijit and Dojox<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429533">Enable
hard-coding of browser sniffing results<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429534">Eliminate
Top-Level Aliases<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc287429535">Eliminate
property accesses via string value<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc287429536">Going All
The Way – More Risky Modifications to Remove “dojo” Itself<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-size:16.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></b>

<h1><a name="_Toc287429501">Preamble</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This document is the result of a series of experiments by
the author to use the Closure Compiler in <i>Advanced Optimizations</i> mode with
the Dojo Toolkit, version 1.6.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The Dojo Toolkit is not written in the (extremely restrictive)
style that takes full benefits of the Closure Compiler. However, the gap can be
bridged quite successfully via a number of tricks and hacks, mostly in modifying
the standard Build script.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The author has deployed a medium-scale mobile web application
targeted for iPad’s and Android tablets. Through this experience, the author
believes that the Closure Compiler (in Advanced mode) provides performance and
other benefits that should not be ignored, especially by mobile web
applications.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>On the other hand, however, the massive infrastructure
provided by the Dojo Toolkit is also too good to ignore. In a perfect world,
there should be a way to seamlessly marry the two. This writing is an on-going
documentation of this attempt.</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc287429502">Design Concept</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>There are a few central concepts when designing the
following process of using the Dojo Toolkit with the Closure Compiler:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The process must make as few changes to the Dojo Toolkit as
possible – this is an attempt to use the Dojo Toolkit primarily, <i>with</i>
the Closure Compiler secondarily, not the other way round</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The programmer must be able to use all features in the Dojo
Toolkit without much restrictions, and in pretty much the same way as normal –
although he/she must take special concern regarding the restrictions of the
Closure Compiler in his/her own code</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Any program written must run without change in the raw <i>without</i>
being compiled by the Closure Compiler</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The programmer must be able to produce a <i>normal</i> Dojo Build
(without using the Closure Compiler) and such build must also run without
change</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc287429503">Caveat</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The author’s application only uses a small subset of the
Dojo Toolkit’s capabilities – e.g. most of Dijit isn’t used due to it being a
mobile application. It uses <span class=CodeChar>dojox.mobile</span> quite
extensively, though. The application is also built with the <span
class=CodeChar>webkitMobile</span> flag turned on, essentially eliminating
large sections of code related to other browsers.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The author does not claim to have found every last place in
the Dojo Toolkit source tree that must be modified, nor does he claim that the
procedure outlined in this document suffices in getting every web program to
work with the Closure Compiler.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The reader is warned that a fair bit of experimentation,
debugging and tweaking <i>will</i> be needed for any new web project that uses
both the Dojo Toolkit and the Closure Compiler in Advanced mode. Nevertheless,
this document should provide strong guidance towards solving some of the major
recurring issues.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In addition, several tricks and hacks to make this work
depends on the fact that the Closure Compiler always converts the same name to
the same mangled name, even though they may be properties of different classes.
In other words, experimental compilation flags such as <span class=CodeChar>disambiguateProperties</span>
and <span class=CodeChar>ambiguateProperties</span> are not supported.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Contributions back to this document are strongly encouraged
and should be sent to the author’s email address.</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc287429504">Who is This For</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This document is for programmers who have a capable
understanding of the Closure Compiler in <i>Advanced Optimizations</i> mode,
who have successfully used the compiler in <i>Advanced</i> mode for other,
non-Dojo-based projects, and who would now like to do the same for Dojo-based
projects.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The reader is also assumed to have a working understanding
of how to invoke the Dojo Build process to make merged builds and multiple
layer files.</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc287429505">Why Closure Compiler</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Why is the Closure Compiler beneficial to projects based on
the Dojo Toolkit? In general, the Closure Compiler in <i>Simple Optimizations</i>
mode performs no better than current general top-of-the-line JavaScript
compressors (e.g. Uglify), and there really is no compelling reason to use it
with the Dojo Toolkit. The standard Dojo Build system has an option to use the
Closure Compiler in Simple mode for compression.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>However, in <i>Advanced Optimizations</i> mode, the Closure
Compiler offers a whole range of additional benefits:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Syntax checking eliminates many typo and careless bugs – a task
also fulfilled by using JavaScript linters.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Type checking eliminates many obscure argument bugs – although it
can also be a pain to use sometimes; purists will say that it takes away some
of the flexibility of JavaScript…</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Dead code removal – smaller downloads, higher performance –
although this is actually less of a potential benefit for heavily-modularized
libraries like Dojo, and Dojo Core functions contain substantial amounts of
cross-calling to prevent much dead code removal, and user code should not have
much dead code anyway…</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Renaming of <i>all</i> properties and variables – smaller
downloads, superior obfuscation – pretty-print a compressed JavaScript file and
you can figure out its logic based on the un-mangled public property/function
names; pretty-print a Closure-compiled JavaScript file and it is really
difficult to figure out anything (for example, even the top namespace objects “<span
class=CodeChar>dojo</span>”, “<span class=CodeChar>dijit</span>” and “<span
class=CodeChar>dojox</span>” can be removed).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Functions and constants in-lining – higher performance, superior
obfuscation. Another major benefit is that this enables writing highly
configurable enterprise software systems, for example multiple layers of
factory abstractions and dependency injection driven by a configuration/setup
file and the ability to produce “optimized” builds for each particular config
with the Compiler automatically unrolling all the abstraction layers via
in-lining.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Flattening of namespaces – higher performance, especially on
mobile devices.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:35.7pt;text-indent:-17.85pt'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Virtualization of prototype methods – higher performance, especially
on mobile devices.</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc287429506">The Catch</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As with any good thing, there are costs. The programmer must
be <b>ultra careful</b> in order to run <i>Advanced Mode</i> compilations. It
is not the purpose of this document to outline the list of extremely strict
requirements. However, most difficulties can be resolved via:</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='margin-bottom:6.0pt'>A special build process – a
     new command-line flag is added to the Dojo Build script called &quot;<span
     class=CodeChar>closure</span>” which, when set to true, will make a range
     of necessary optimizations and output build files in a special format that
     is capable of being processed by the Closure Compiler. This is the “easy”
     solution as it is reasonably automatic.</li>
 <li class=MsoNormal style='margin-bottom:6.0pt'>Specially marked comments that
     indicate to the Dojo Build script that special care should be taken. This
     is especially necessary when using “<span class=CodeChar>dojo.declare</span>”
     to declare new classes – a “property names map” must be created by the special
     Build script in order to convert un-mangled property names (used in <span
     class=CodeChar>get</span>/<span class=CodeChar>set</span> calls) to mangled
     names.</li>
 <li class=MsoNormal style='margin-bottom:6.0pt'>An “extern” file (used by the
     Closure Compiler) that lists out the property names that should <i>not</i>
     be renamed. This list should be as short as possible for obvious reasons,
     but it is not always possible to completely eliminate it because the Dojo
     Toolkit is sprinkled with property accesses via string names – a huge
     no-no for the Closure Compiler.</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-size:16.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></b>

<h1><a name="_Toc287429507">The Special Build Process</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The special Build process is responsible for converting
normal Dojo-style source code files into a format acceptable to the Closure
Compiler.</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429508">Step 1: Invoking the special Build process</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Do either of the following:</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>In your Build profile, specify the following parameter
     under <span class=CodeChar>dependencies</span>:<br>
      <span class=CodeChar>closure: true,</span></li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Use the following command-line parameter when running the
     build script: <br>
      <span class=CodeChar>closure=true</span></li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A sample command line executed on Windows:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>build
profileFile=profile.js action=release closure=true</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429509">Step 2: Constructing the Build profile</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>All <span class=CodeChar>dojo</span>, <span class=CodeChar>dijit</span>,
<span class=CodeChar>dojox</span> and user code <i>must</i> be separated into
different layers. In particular, the <span class=CodeChar>dojo</span> and <span
class=CodeChar>dijit</span> layers <i>must</i> be separated due to i18n bundle
resources.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Separating the code base into different layers make it
easier to use different Closure settings for each layer – for example, user
code should have full type-checking turned on, but not for Dojo Toolkit layers
(otherwise there will be a <b>large</b> number of type errors).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>For each Dojo Toolkit layer, include a <i>copyright</i>
file, which should contain the following:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'> *
@fileoverview</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'> *
@suppress {checkTypes}</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'> */</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Doing the above will prevent the Closure Compiler from doing
type-checking of these layer files. Otherwise, if type-checking is turned on,
there will be a lot of errors from the Dojo Toolkit.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Include the file <span class=CodeChar>closure.js</span> in the
<i>first </i>user code layer (first layer <i>only</i>), <i>before</i> any user
code – it contains a number of necessary changes (especially with regards to
property names mapping) to the Dojo Toolkit.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>For a detailed map of the layers structure, see the next
section.</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429510">Step 3: Running the Compiler on the Build Output</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The Dojo Build process creates a number of merged JavaScript
files, one for each layer. They are named: <i>&lt;layer&gt;</i><span
class=CodeChar>.js.uncompressed.js</span>. The file <span class=CodeChar>dojo.js.uncompressed.js</span>
always exists.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>It is necessary that the <i>uncompressed </i>version be fed to
the Closure Compiler instead because some optimizations made by other
optimizers may conflict with the Closure Compiler. Pass each uncompressed layer
file, in the correct order, to the “<span class=CodeChar>--js</span>” parameter
of the Closure Compiler. The reader is assumed to understand how to run the
Closure Compiler with its numerous command-line options.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The Dojo Build process loads the i18n bundle resources at
the <b>end</b> of any layer that uses i18n (which should be the <span
class=CodeChar>dijit</span> layer). Therefore, all i18n bundle resource files
(usually under the <span class=CodeChar>nls</span> subdirectory) should be
included <b>before</b> the <span class=CodeChar>dijit</span> layer ends, and
the only way to do this is to separate <span class=CodeChar>dojo</span> and <span
class=CodeChar>dijit</span> into different layers.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Special code must be added to the <i>end</i> of the <span
class=CodeChar>dojo</span> layer to handle certain i18n objects, because the
Dojo Build process does not touch the i18n bundle resource files, and the i18n
bundle resources will assume these objects are provided for their declarations:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:white;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:white;
padding-bottom:4.0pt;border-bottom:.25pt solid silver'><i>i18n Code Set #1</i></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo.provide(&quot;dojo.cldr.nls.number&quot;);                     //
If using dojo.number</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo.provide(&quot;dojo.cldr.nls.gregorian&quot;);         //
If using dojo.date.locale</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo.provide(&quot;dijit.nls.loading&quot;);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo.provide(&quot;dijit.nls.common&quot;);</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Also, include code like the following at the <i>very
beginning</i> of the <span class=CodeChar>dijit</span> layer:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:white;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:white;
padding-bottom:4.0pt;border-bottom:.25pt solid silver'><i>i18n Code Set #2</i></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo._loadedModules[&quot;dijit.nls.loading&quot;]
= dijit.nls.loading;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo._loadedModules[&quot;dijit.nls.common&quot;]
= dijit.nls.common;</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This is because <span class=CodeChar>dojo.i18n.getLocalization</span>
actually loads resource bundles from the <span class=CodeChar>dojo._loadedModules</span>
hash, which is skipped by the special Build process to avoid aliases.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Certain Dojo Core modules (e.g. <span class=CodeChar>dojo.number</span>)
depend on i18n, so they must be included <i>after</i> the <span class=CodeChar>dojo</span>
layer (i.e. in the <span class=CodeChar>dijit</span> layer instead). How to know
whether any Dojo Core module depends on i18n? After building the project and
running it with the layer files, there will be i18n-related errors (e.g. not
finding a particular resource bundle) if there is a module that depends on i18n
which is included in the <span class=CodeChar>dojo</span> layer.</p>

<p class=MsoNormal>&nbsp;</p>

<span style='font-size:12.0pt;font-family:"Times New Roman"'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal>As a result, the Dojo Build layers (bracketed in thick
borders) and Closure Compiler <span class=CodeChar>--js</span> loading order
should be:</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:59.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border:solid windowtext 3.0pt;
  border-bottom:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>Copyright file with
  @suppress</p>
  </td>
  <td width=143 rowspan=3 style='width:107.25pt;border:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:2.4pt;margin-right:0in;margin-bottom:
  2.4pt;margin-left:11.85pt'>dojo layer</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border-top:none;border-left:
  solid windowtext 3.0pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 3.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>Dojo Core</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border:solid windowtext 3.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'><i>i18n Code Set #1</i></p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border-top:none;border-left:
  solid gray 3.0pt;border-bottom:solid windowtext 3.0pt;border-right:solid gray 3.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>i18n bundle resource
  files</p>
  </td>
  <td width=143 style='width:107.25pt;border:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:2.4pt;margin-right:0in;margin-bottom:
  2.4pt;margin-left:11.85pt'>i18n section</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border-top:none;border-left:
  solid windowtext 3.0pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 3.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>Copyright file with
  @suppress</p>
  </td>
  <td width=143 rowspan=4 style='width:107.25pt;border:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:2.4pt;margin-right:0in;margin-bottom:
  2.4pt;margin-left:11.85pt'>dijit layer</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border-top:none;border-left:
  solid windowtext 3.0pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 3.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'><i>i18n Code Set #2</i></p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border-top:none;border-left:
  solid windowtext 3.0pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 3.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>Dojo modules that
  require i18n</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border:solid windowtext 3.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>Dijit modules</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border-top:none;border-left:
  solid windowtext 3.0pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 3.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>Copyright file with
  @suppress</p>
  </td>
  <td width=143 rowspan=2 style='width:107.25pt;border:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:2.4pt;margin-right:0in;margin-bottom:
  2.4pt;margin-left:11.85pt'>dojox layer</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border:solid windowtext 3.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>Dojox modules</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border-top:none;border-left:
  solid windowtext 3.0pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 3.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>Copyright file with
  @preserve</p>
  </td>
  <td width=143 rowspan=3 style='width:107.25pt;border:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:2.4pt;margin-right:0in;margin-bottom:
  2.4pt;margin-left:11.85pt'>1<sup>st</sup> user layer</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border-top:none;border-left:
  solid windowtext 3.0pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 3.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>closure.js</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border:solid windowtext 3.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>User Code</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border:solid windowtext 3.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>User Code</p>
  </td>
  <td width=143 rowspan=2 style='width:107.25pt;border:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:2.4pt;margin-right:0in;margin-bottom:
  2.4pt;margin-left:11.85pt'>user layer(s)</p>
  </td>
 </tr>
 <tr>
  <td width=277 valign=top style='width:207.75pt;border:solid windowtext 3.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:2.4pt;margin-right:0in;
  margin-bottom:2.4pt;margin-left:0in;text-align:center'>User Code</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A sample command line executed on Windows:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>java
-jar compiler.jar<br>
        --compilation_level ADVANCED_OPTIMIZATIONS <br>
        --warning_level VERBOSE <br>
        --create_name_map_files true </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        --formatting
PRINT_INPUT_DELIMITER</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        --jscomp_error=checkTypes
<br>
        --jscomp_error=accessControls </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        --externs
externs.js                                         <span style='font-family:
Wingdings'>ß</span> Externs file<br>
        --js dojo.js.uncompressed.js <br>
        --js nls\dijit_en.js <br>
        --js nls\dijit_en_us.js <br>
        --js nls\dijit_en_gb.js                                       <span
style='font-family:Wingdings'>ß</span> Add all necessary i18n bundle files<br>
        --js dijit.js.uncompressed.js <br>
        --js dojox.js.uncompressed.js <br>
        --js user1.js.uncompressed.js                      <span
style='font-family:Wingdings'>ß</span> The first user layer should include
closure.js<br>
        --js user2.js.uncompressed.js                      <span
style='font-family:Wingdings'>ß</span> User layer files<br>
        --js user3.js.uncompressed.js <br>
        --js_output_file output.js </p>

</div>

<p class=MsoNormal>&nbsp;</p>

<b><i><span style='font-size:14.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc287429511">Step 4: Debugging Builds</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When things don’t work – and it never works 100% on the
first try unless you are either very good or very lucky – there are a few
debugging steps that should take care of 90% of the problems:</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='margin-bottom:6.0pt'>Rerun the Closure Compiler
     with the following command line options:<br>
     <span class=CodeChar>      --formatting PRETTY_PRINT<br>
      --debug true</span></li>
 <li class=MsoNormal style='margin-bottom:6.0pt'>Rerun the program, note down
     the line number of the error and the stack trace.</li>
 <li class=MsoNormal style='margin-bottom:6.0pt'>In 90% of the case, it will be
     a “property not found” error – something has been renamed by the Closure
     Compiler which is eventually accessed via string name. Turning on debug
     mode will allow you to pin-point the property that is the culprit.</li>
 <li class=MsoNormal style='margin-bottom:6.0pt'>If this fails to identify the
     source the problem, you just have to debug it like any normal programming
     error.<a href="#_ftn1" name="_ftnref1" title=""><span
     class=MsoFootnoteReference><span class=MsoFootnoteReference><span
     style='font-size:12.0pt;font-family:"Times New Roman"'>[1]</span></span></span></a></li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<b><i><span style='font-size:14.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc287429512">Step 5: Required “Externs”</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following is a list of “externs” required by the Closure
Compiler. This is by no means an exhaustive list. There may be other symbols
used throughout the Dojo Toolkit code base that requires adding externs. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=Code>// Since HTML attributes are mapped to Dijit properties
CASE-INSENSITIVE, we need to </p>

<p class=Code>// make sure that no property is renamed by the Closure Compiler
to a name that differs</p>

<p class=Code>// from some HTML attribute by case only!</p>

<p class=Code>&nbsp;</p>

<p class=Code>// In practice, we only need to consider up to two-character
attribute names (since the </p>

<p class=Code>// Closure Compiler will always try to use the shortest variable
names and two</p>

<p class=Code>// characters usually suffice. Which means the only danger is
really &quot;id&quot;!)</p>

<p class=Code>&nbsp;</p>

<p class=Code>// Similarly, be careful with custom attribute names like “to”,
“at” etc. if they will be loaded</p>

<p class=Code>// into a custom Dijit. </p>

<p class=Code>&nbsp;</p>

<p class=Code>var Id = null;      // If this is a mangled name, it will
conflict with “id” in an HTML node </p>

<p class=Code>var ID = null;      // If this is a mangled name, it will
conflict with “id” in an HTML node </p>

<p class=Code>var iD = null;      // If this is a mangled name, it will
conflict with “id” in an HTML node </p>

<p class=Code>&nbsp;</p>

<p class=Code>&nbsp;</p>

<p class=Code>// Redundant DOM global externs as &quot;window&quot; may not be
the global object</p>

<p class=Code>&nbsp;</p>

<p class=Code>var location = null;</p>

<p class=Code>var console = null;</p>

<p class=Code>var scroll = null;</p>

<p class=Code>var scrollBy = null;</p>

<p class=Code>var scrollTo = null;</p>

<p class=Code>var resizeTo = null;</p>

<p class=Code>var resizeBy = null;</p>

<p class=Code>var load = null;</p>

<p class=Code>var Components = { // Fire-Fox</p>

<p class=Code>    classes: null,</p>

<p class=Code>    interfaces: null,</p>

<p class=Code>    mozIJSSubScriptLoader: null</p>

<p class=Code>};</p>

<p class=Code>var Jaxer = null;        // Jaxer</p>

<p class=Code>&nbsp;</p>

<p class=Code>&nbsp;</p>

<p class=Code>// RequireJS</p>

<p class=Code>&nbsp;</p>

<p class=Code>var define = null;</p>

<p class=Code>var require = null;</p>

<p class=Code>var currentModule = null;</p>

<p class=Code>&nbsp;</p>

<p class=Code>&nbsp;</p>

<p class=Code>// HTML5 externs </p>

<p class=Code>&nbsp;</p>

<p class=Code>var localStorage = null;</p>

<p class=Code>var JSON = null;</p>

<p class=Code>&nbsp;</p>

<p class=Code>&nbsp;</p>

<p class=Code>// Externs for WebKit-specific styles</p>

<p class=Code>&nbsp;</p>

<p class=Code>var webkitTypes = </p>

<p class=Code>{</p>

<p class=Code>    webkitAnimation: null,</p>

<p class=Code>    webkitAnimationDelay: null,</p>

<p class=Code>    webkitAnimationDirection: null,</p>

<p class=Code>    webkitAnimationDuration: null,</p>

<p class=Code>    webkitAnimationFillMode: null,</p>

<p class=Code>    webkitAnimationIterationCount: null,</p>

<p class=Code>    webkitAnimationName: null,</p>

<p class=Code>    webkitAnimationPlayState: null,</p>

<p class=Code>    webkitAnimationTimingFunction: null,</p>

<p class=Code>    webkitAppearance: null,</p>

<p class=Code>    webkitBackfaceVisibility: null,</p>

<p class=Code>    webkitBackgroundClip: null,</p>

<p class=Code>    webkitBackgroundComposite: null,</p>

<p class=Code>    webkitBackgroundOrigin: null,</p>

<p class=Code>    webkitBackgroundSize: null,</p>

<p class=Code>    webkitBorderBottomLeft: null,</p>

<p class=Code>    webkitBorderBottomRight: null,</p>

<p class=Code>    webkitBorderHorizontalSpacing: null,</p>

<p class=Code>    webkitBorderImage: null,</p>

<p class=Code>    webkitBorderRadius: null,</p>

<p class=Code>    webkitBorderTopLeft: null,</p>

<p class=Code>    webkitBorderTopRight: null,</p>

<p class=Code>    webkitBorderVerticalSpacing: null,</p>

<p class=Code>    webkitBoxAlign: null,</p>

<p class=Code>    webkitBoxDirection: null,</p>

<p class=Code>    webkitBoxFlex: null,</p>

<p class=Code>    webkitBoxFlexGroup: null,</p>

<p class=Code>    webkitBoxLines: null,</p>

<p class=Code>    webkitBoxOrdinalGroup: null,</p>

<p class=Code>    webkitBoxOrient: null,</p>

<p class=Code>    webkitBoxPack: null,</p>

<p class=Code>    webkitBoxReflect: null,</p>

<p class=Code>    webkitBoxShadow: null,</p>

<p class=Code>    webkitBoxSizing: null,</p>

<p class=Code>    webkitColumnBreakAfter: null,</p>

<p class=Code>    webkitColumnBreakBefore: null,</p>

<p class=Code>    webkitColumnBreakInside: null,</p>

<p class=Code>    webkitColumnCount: null,</p>

<p class=Code>    webkitColumnGap: null,</p>

<p class=Code>    webkitColumnRule: null,</p>

<p class=Code>    webkitColumnRuleColor: null,</p>

<p class=Code>    webkitColumnRuleStyle: null,</p>

<p class=Code>    webkitColumnRuleWidth: null,</p>

<p class=Code>    webkitColumns: null,</p>

<p class=Code>    webkitColumnWidth: null,</p>

<p class=Code>    webkitDashboardRegion: null,</p>

<p class=Code>    webkitLineBreak: null,</p>

<p class=Code>    webkitMarginBottomCollapse: null,</p>

<p class=Code>    webkitMarginCollapse: null,</p>

<p class=Code>    webkitMarginStart: null,</p>

<p class=Code>    webkitMarginTopCollapse: null,</p>

<p class=Code>    webkitMarquee: null,</p>

<p class=Code>    webkitMarqueeDirection: null,</p>

<p class=Code>    webkitMarqueeIncrement: null,</p>

<p class=Code>    webkitMarqueeRepetition: null,</p>

<p class=Code>    webkitMarqueeSpeed: null,</p>

<p class=Code>    webkitMarqueeStyle: null,</p>

<p class=Code>    webkitMask: null,</p>

<p class=Code>    webkitMaskAttachment: null,</p>

<p class=Code>    webkitMaskBoxImage: null,</p>

<p class=Code>    webkitMaskClip: null,</p>

<p class=Code>    webkitMaskComposite: null,</p>

<p class=Code>    webkitMaskImage: null,</p>

<p class=Code>    webkitMaskOrigin: null,</p>

<p class=Code>    webkitMaskPosition: null,</p>

<p class=Code>    webkitMaskPositionX: null,</p>

<p class=Code>    webkitMaskPositionY: null,</p>

<p class=Code>    webkitMaskRepeat: null,</p>

<p class=Code>    webkitMaskSize: null,</p>

<p class=Code>    webkitNbspMode: null,</p>

<p class=Code>    webkitPaddingStart: null,</p>

<p class=Code>    webkitPerspective: null,</p>

<p class=Code>    webkitPerspectiveOrigin: null,</p>

<p class=Code>    webkitRtlOrdering: null,</p>

<p class=Code>    webkitTapHighlightColor: null,</p>

<p class=Code>    webkitTextFillColor: null,</p>

<p class=Code>    webkitTextSecurity: null,</p>

<p class=Code>    webkitTextSizeAdjust: null,</p>

<p class=Code>    webkitTextStroke: null,</p>

<p class=Code>    webkitTextStrokeColor: null,</p>

<p class=Code>    webkitTextStrokeWidth: null,</p>

<p class=Code>    webkitTouchCallout: null,</p>

<p class=Code>    webkitTransform: null,</p>

<p class=Code>    webkitTransformOrigin: null,</p>

<p class=Code>    webkitTransformOriginX: null,</p>

<p class=Code>    webkitTransformOriginY: null,</p>

<p class=Code>    webkitTransformOriginZ: null,</p>

<p class=Code>    webkitTransformStyle: null,</p>

<p class=Code>    webkitTransition: null,</p>

<p class=Code>    webkitTransitionDelay: null,</p>

<p class=Code>    webkitTransitionDuration: null,</p>

<p class=Code>    webkitTransitionProperty: null,</p>

<p class=Code>    webkitTransitionTimingFunction: null,</p>

<p class=Code>    webkitUserDrag: null,</p>

<p class=Code>    webkitUserModify: null,</p>

<p class=Code>    webkitUserSelect: null,</p>

<p class=Code>    animationName: null         // in webkitAnimationEnd</p>

<p class=Code>}; </p>

<p class=Code>&nbsp;</p>

<p class=Code>&nbsp;</p>

<p class=Code>// Dojo config</p>

<p class=Code>&nbsp;</p>

<p class=Code>var djConfig = { <i><span style='font-family:"Times New Roman";
font-weight:normal'>Any config option used</span></i><span style='font-family:
"Times New Roman"'>…</span> };</p>

<p class=Code>var dojoConfig = { <i><span style='font-family:"Times New Roman";
font-weight:normal'>Any config option used</span></i><span style='font-family:
"Times New Roman"'>…</span> };</p>

<p class=Code>&nbsp;</p>

<p class=Code>&nbsp;</p>

<p class=Code>// The following are needed for dojo.Animation</p>

<p class=Code>&nbsp;</p>

<p class=Code>var beforeBegin = null;</p>

<p class=Code>var onBegin = null;</p>

<p class=Code>var onAnimate = null;</p>

<p class=Code>var onEnd = null;</p>

<p class=Code>var onPlay = null;</p>

<p class=Code>var onPause = null;</p>

<p class=Code>var onStop = null;</p>

<p class=Code>var play = null;</p>

<p class=Code>var pause = null;</p>

<p class=Code>var stop = null;</p>

<p class=Code>var gotoPercent = null;</p>

<p class=Code>&nbsp;</p>

<p class=Code>// The following are needed for Dijit</p>

<p class=Code>&nbsp;</p>

<p class=Code>var node = null;</p>

<p class=Code>var domNode = null;                       <span style='background:
white'>// Template attach point</span></p>

<p class=Code>var containerNode = null;             <span style='background:
white'>// Template attach point</span></p>

<p class=Code>&nbsp;</p>

<p class=Code>// The following is needed for i18n (each locale that is loaded
must be included)</p>

<p class=Code>// i18n is particularly troublesome because it loads bundle
resource files via text names</p>

<p class=Code>&nbsp;</p>

<p class=Code>var nls = {</p>

<p class=Code>    loading: { en, en_us, en_gb, <i><span style='font-weight:
normal'>&lt;locale&gt;</span></i>, <i><span style='font-weight:normal'>&lt;locale&gt;</span></i>,
<i><span style='font-weight:normal'>&lt;locale&gt;</span></i> },</p>

<p class=Code>    common: null</p>

<p class=Code>};</p>

<p class=Code>&nbsp;</p>

<b><span style='font-size:16.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></b>

<h1><a name="_Toc287429513">Watch-Out’s</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Since most of the processing necessary to make the Dojo
Toolkit compatible with the Closure Compiler occurs in the Dojo Build process
(via the Build script), there are a number of issues to watch out for in
addition to the normal (long) list of restrictions regarding writing JavaScript
for the Closure Compiler with Advanced Mode.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The Build script does simple text search-and-replace. It
does <b>not</b> attempt to parse the JavaScript source files. As a result,
certain care must be observed to make sure that the necessary statements are
caught by the text search patterns.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.5in'><b>Note:</b>   Anyone
using the Closure Compiler in Advanced mode should <i>always</i> be careful
regarding what this frivolous Compiler will do to user code, so limitations and
restrictions are the norm.</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429514">Avoid names with “$”</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The special Build process tries not to touch variables and
properties with names that are not made up of only letters, digits and the
underscore character. Using the dollar sign “<span class=CodeChar>$</span>” as
part of a variable/property name will likely bypass any processing.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Although there is no reason why the Build script cannot be
written to handle names with “<span class=CodeChar>$</span>” characters, user
code is <i>strongly</i> discouraged from using such names, as it makes it
difficult to recognize variables and properties with the Closure Compiler’s <span
class=CodeChar>--debug</span> mode turned on – which in turn uses “<span
class=CodeChar>$</span>” characters to generate mangled names.<a href="#_ftn2"
name="_ftnref2" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[2]</span></span></span></a></p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429515">JsDoc’s</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>All user code should use JsDoc’s for type-checking by the
Closure Compiler.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Dojo-style argument type comments will be automatically
converted by the special Build process into JsDoc comments. However, this
conversion is not perfect and the expressiveness of the Dojo-style comments is
less than that provided by JsDoc.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As the Dojo Toolkit is also experimenting with moving to
JsDoc type annotations, it is recommended that JsDoc’s be used from the
beginning.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The special Build process automatically converts most
Dojo-style type comments into JsDoc comments.</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429516">dojo._hasResource, dojo._loadedModules</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span class=CodeChar>dojo._hasResource</span> and <span
class=CodeChar>dojo._loadedModules</span> are removed by the special Build
process – more accurately <i>ignored</i>. This is to avoid creating unnecessary
aliases.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>User code is <i>strongly</i> discouraged from relying on
them.</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429517">dojo.provide</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>All <span class=CodeChar>dojo.provide</span> calls will be
turned into <span class=CodeChar>goog.provide</span> calls (which does the same
thing, but is internally in-lined by the Closure Compiler). Putting anything
other than a string with a valid scope made up only of letters, digits and the
underscore character (i.e. no dollar sign “$”) will bypass any processing.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Another way to bypass processing is to do it indirectly via
a local variable:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
dp = dojo.provide;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dp(“foo.bar.Baz”);             //
This line will be bypassed</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The Closure Compiler is very fussy about <span
class=CodeChar>goog.provide</span>, however. It will generate an error if a
symbol is provided twice – so overlapping <span class=CodeChar>dojo.provide</span>’s
are not supported.</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429518">Properties accessed via string name</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Some user code has its own functions for creating
connections, which in turn calls <span class=CodeChar>dojo.connect</span> or <span
class=CodeChar>this.connect</span>. For example, the following:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>function
myConnect (obj, evt, scope, method) {</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        dojo.connect(obj,
evt, scope, method);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>}</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>myConnect(foo,
“bar”, this, “hello”);  // This will not be processed</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>will not be processed because it does not match the strict
patterns recognized by the special Build process, and will cause a
“property-not-found” error after the real methods “<span class=CodeChar>bar</span>”
and “<span class=CodeChar>hello</span>” are renamed by the Closure Compiler.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Whenever a user program must access a certain property via
its string name, putting the comment <span class=CodeChar>/*remap*/</span> in
front of the <i>text</i> causes the special Build process to convert it into a
call to <span class=CodeChar>closureGetMappedPropertyName</span><a href="#_ftn3"
name="_ftnref3" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[3]</span></span></span></a>,
which then returns the mangled name. For example:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>myConnect(foo,
/*remap*/ “bar”, this, this.hello);     // Recommend way to call</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>will be converted into:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>myConnect(foo,
closureGetMappedPropertyName({bar:null}), this, this.hello);</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>and the code will work fine. For most types of string-based
property access, similar tactics should also work. For example: </p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
prop = [“bar”, “Baz”, “hello”][index];</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
value = foo[prop];</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>can be written as:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
prop;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>switch
(index) {</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        case
0: prop = /*remap*/ “bar”; break;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        case
1: prop = /*remap*/ “Baz”; break;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        case
2: prop = /*remap*/ “hello”; break;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>}</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
value = foo[prop];</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>However, it <i>cannot</i> be written as:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
propnames = [“bar”, “Baz”, “hello”];</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
prop = /*remap*/ propnames[index];            // WRONG!!!</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
value = foo[prop];</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The comment <span class=CodeChar>/*remap*/</span> must be
followed immediately by a <i>text string</i>.</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429519">dojo.connect, this.connect, dojo.hitch<br>
dojo.subscribe, this.subscribe</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Calls to <span class=CodeChar>dojo.hitch</span>, <span
class=CodeChar>dojo.connect</span>, <span class=CodeChar>dojo.subscribe</span>,
<span class=CodeChar>this.connect</span> (used in Dijit’s) and <span
class=CodeChar>this.subscribe</span> (used in Dijit’s) are the primary culprits
when using the Dojo Toolkit with the Closure Compiler in Advanced mode. Handler
functions are often passed by string name and the event function is <i>always</i>
passed by string name.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The special Build process takes care of converting most of
these calls into the correct form for processing by the Closure Compiler. For
example:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo.connect(obj,
“foo”, scope, “bar”);</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>will be converted to:</p>

<p class=MsoNormal><span class=CodeChar>&nbsp;</span></p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo.connect(obj,
closureGetMappedPropertyName({foo:null}), scope, scope.bar);</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The special global function, <span class=CodeChar>closureGetMappedPropertyName</span>,
is used to map a property name that has been mangled by the Closure Compiler
into its original, un-mangled name, or vice versa. This function, our primary
workhorse, <i>depends</i> upon the fact that the Closure Compiler always
converts the same name to the same mangled version (see the Caveat section
above).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The pattern used by the special Build process is not very
intelligent. It does not parse the JavaScript source code, but simply attempts
to match arguments specified either as simple variables and properties (made up
only of letters, digits, the underscore character and dots) or simple text strings.
Anything more complicated with be bypassed, e.g.:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo.connect(obj,
(happy ? “foo” : “boo”), scope, “bar”);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo.connect(obj[x],
“foo”, scope, “bar”);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo.connect(obj,
“foo”, scope, getMethodName(scope));</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Another way to bypass processing is to do it indirectly via
a local variable (other than “<span class=CodeChar>d</span>” which is
automatically aliased to <span class=CodeChar>dojo</span>):</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
dc = dojo.connect;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dc(obj,
“event”, scope, “method”);     // This line will be bypassed</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid windowtext 3.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:black;margin-left:9.35pt;margin-right:9.35pt'>

<p class=MsoNormal align=center style='text-align:center;page-break-after:avoid;
background:black;border:none;padding:0in'><b>IMPORTANT!!!</b></p>

<p class=MsoNormal style='background:white;border:none;padding:0in'>The special
Build process <i>skips</i> event names that are all lower-case and starting
with “<span class=CodeChar>on</span>”, or names that are mixed-case and
starting with “<span class=CodeChar>webkit</span>”. For example, <span
class=CodeChar>onmouseenter</span>, <span class=CodeChar>onchange</span>, <span
class=CodeChar>webkitAnimationEnd</span> etc. will all be left alone, as the
special Build process assumes that they refer to normal DOM events. Therefore,
avoid naming any user events in such manner – always use the recommended Dojo-style:
<span class=CodeChar>onChange</span>, <span class=CodeChar>onMouseEnter</span>
etc.</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429520">Dojo classes and dojo.declare</a></h2>

<p class=MsoNormal>&nbsp;</p>

<h3>Problem</h3>

<p class=MsoNormal>Declaring classes should be done directly via <span
class=CodeChar>dojo.declare</span>. The special Build process takes care of
adding the correct JsDoc comments for type-checking purposes (so that the
Closure Compiler will not complain about trying to “<span class=CodeChar>new</span>”
a non-class object).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Dojo classes have special functionalities. In general,
properties are read and set via getter/setter functions (typically <span
class=CodeChar>get</span> and <span class=CodeChar>set</span>); this is to
enable ad hoc processing especially on the setter side. Property values are
read/set by passing the name of the property in <b>text</b> as the first
argument to <span class=CodeChar>get</span> and <span class=CodeChar>set</span>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In addition, user-specified functions named <span
class=CodeChar>_get</span><i>Xxx</i><span class=CodeChar>Attr</span> and <span
class=CodeChar>_set</span><i>Xxx</i><span class=CodeChar>Attr</span> will
automatically be used as the getter and setter for the “<i>xxx</i>” property.</p>

<p class=MsoNormal>&nbsp;</p>

<h3>Declaring a public property</h3>

<p class=MsoNormal>Needless to say, such large-scale usage of string property
names precludes the type of ad hoc property name mapping via the <span
class=CodeChar>/*remap*/</span> comment. The solution to this is to build a global
“property names map”<a href="#_ftn4" name="_ftnref4" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:12.0pt;font-family:"Times New Roman"'>[4]</span></span></span></a>
which contains a one-to-one mapping of un-mangled (original) property names to
the mangled names provided by the Closure Compiler. The following syntax must
be strictly observed:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dojo.declare
(“my.New.Class”, myBase, { // Base classes in an array also OK</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        /*public*/
prop1: value,                               // Public property</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        /*public*/
prop2: value,                               // Public property</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        /*public*/
prop3: value,                               // Public property</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                :</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        _prop4:
value,                                                    // Private use, not
processed</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                :</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        method1:
function (…) { … },</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        method2:
function (…) { … },</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        method3:
function (…) { … },</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                :</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>});</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The special comment <span class=CodeChar>/*public*/</span> is
used to create the “property names map” for this class. Mappings for getter/setter
functions (e.g. <span class=CodeChar>_get</span><i>Xxx</i><span class=CodeChar>Attr</span>,
<span class=CodeChar>_set</span><i>Xxx</i><span class=CodeChar>Attr</span>
etc.) will also be included, <i>if they are used</i>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Any property (properties #1 to #3 in the example above) marked
with a <span class=CodeChar>/*public*/</span> comment is settable declaratively
via HTML and automatically propagated into the class by the Dojo parser. Any
property not marked with <span class=CodeChar>/*public*/</span> (property #4 in
the example above) is assumed to be private, internal-use only. In order to use
such a property with <span class=CodeChar>get</span> and <span class=CodeChar>set</span>,
the <span class=CodeChar>/*remap*/</span> comment must be added before the text
of the property name, e.g.:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>widget.set(/*remap*/
“_prop4”, “Hello World”);</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<h3>Global nature of property names mapping</h3>

<p class=MsoNormal>A <i>global</i> property names map is built instead of one
map per class. This is done mainly for performance reasons. A by-product is
that whenever a property in a class is marked with <span class=CodeChar>/*public*/</span>,
it will be inserted into the <i>global</i> map object. Properties in other
unrelated classes that happen to have the same <i>name</i> as this property
will automatically be covered as well, <i>even though</i> they may not be
marked with <span class=CodeChar>/*public*/</span>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In most usage, this is a <i>good</i> feature, as the <span
class=CodeChar>get</span>/<span class=CodeChar>set</span> set of functions
always expects <i>unmangled</i> text property names, and the difference will be
for a getter or setter to work as expected instead of failing after compilation.
However, for ease of maintenance and debugging, it is always proper to include
all the necessary <span class=CodeChar>/*public*/</span> in each public
property.</p>

<p class=MsoNormal>&nbsp;</p>

<h3>Bypassing property names mapping</h3>

<p class=MsoNormal>Any class declaration not matching this exact style will be
bypassed. Therefore, a way to bypass such processing is to simply do it
indirectly via a local variable (other than “<span class=CodeChar>d</span>”
which is automatically aliased to <span class=CodeChar>dojo</span>):</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
dc = dojo.declare;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>dc(“foo.bar.Baz”,
my.base, { …      // This will be bypassed</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<h3>Using closureAddPropertyNamesMap </h3>

<p class=MsoNormal>Although it would be beneficial to add such comments to <i>all</i>
Dijit class declarations, it is too large a change to be considered practical.
Therefore, none of the Dijit classes currently have properties marked with <span
class=CodeChar>/*public*/</span>, so in order to use them declaratively “extern”
symbols must be provided to the Closure Compiler for <i>each</i> <i>public
property</i> in order to avoid renaming. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Alternatively, the global function <span class=CodeChar>closureAddPropertyNamesMap</span><a
href="#_ftn5" name="_ftnref5" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[5]</span></span></span></a>
defined in <span class=CodeChar>closure.js</span> can be used to add entries to
the global property names map. The argument is a hash object with unquoted
names of properties mapping to the same names in quoted string format, for
example to add a “<span class=CodeChar>title</span>” property to the property
names map:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>closureAddPropertyNamesMap({</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        title:
“title”,</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        _getTitleAttr:
“_getTitleAttr”,       // <span style='font-family:Wingdings'>ß</span> Needed
if _getTitleAttr is defined</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        _setTitleAttr:
“_setTitleAttr”        // <span style='font-family:Wingdings'>ß</span> Needed
if _setTitleAttr is defined</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>});</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<h3>Standard mappings</h3>

<p class=MsoNormal>In <span class=CodeChar>closure.js</span>, some standard
property names are already added:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.25in'><span class=CodeChar>dijit._WidgetBase</span>:                <span
class=CodeChar>value</span>, <span class=CodeChar>widgetId</span>, <span
class=CodeChar>disabled</span>, <span class=CodeChar>hidden</span></p>

<p class=MsoNormal style='margin-left:.25in'><span class=CodeChar>dijit.layout.ContentPane</span>:  <span
class=CodeChar>content</span></p>

<p class=MsoNormal style='margin-left:.25in'><span class=CodeChar>dijit.Dialog:                           duration</span>,
all template attach points and attach events</p>

<p class=MsoNormal style='margin-left:.25in'><span class=CodeChar>dijit.DialogUnderlay</span>:          <span
class=CodeChar>dialogId</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-size:16.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></b>

<h1><a name="_Toc287429521">Necessary Modifications to Dojo Build Scripts</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following file is updated to add special processing for
the Closure Compiler:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Code>    dojo-toolkit/util/buildscripts/jslib/buildUtil.js</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following files are added:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Code>    dojo-toolkit/util/buildscripts/jslib/dojoGuardStart_Closure</p>

<p class=Code>    dojo-toolkit/util/buildscripts/jslib/dojoGuardEnd_Closure</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-size:16.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></b>

<h1><a name="_Toc287429522">Necessary Modifications to Dojo Core</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The Dojo Toolkit is not written to satisfy the Closure
Compiler’s many restrictions and limitations. The special Build process takes
care of most of these differences. Unfortunately, some minimal changes still must
be made to the Dojo source tree.</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429523">Public functions missing argument type comments</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=Notes>Notes:  Correct argument type comments aid in type-checking of
user code by the Closure Compiler and should be fixed.</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=590
 style='width:6.15in;margin-left:23.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=132 valign=top style='width:99.0pt;border-top:2.25pt;border-left:
  2.25pt;border-bottom:1.0pt;border-right:1.0pt;border-color:windowtext;
  border-style:solid;background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Function</b></p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>File &amp; line number</b></p>
  </td>
  <td width=278 valign=top style='width:2.9in;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Comments</b></p>
  </td>
 </tr>
 <tr>
  <td width=132 valign=top style='width:99.0pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo.byId</p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/html.js:50,76</p>
  </td>
  <td width=278 valign=top style='width:2.9in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Missing argument type comments.</p>
  </td>
 </tr>
 <tr>
  <td width=132 valign=top style='width:99.0pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo.create</p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/html.js:1482</p>
  </td>
  <td width=278 valign=top style='width:2.9in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Missing argument type comments.</p>
  </td>
 </tr>
 <tr>
  <td width=132 valign=top style='width:99.0pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 2.25pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo.place</p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/html.js:217</p>
  </td>
  <td width=278 valign=top style='width:2.9in;border-top:none;border-left:none;
  border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Missing argument type comments.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429524">Incorrect/incomplete argument type comments</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=Notes>Notes:  Some argument type comments are incorrect or incomplete.
In particular, some optional arguments are in the front of the arguments list,
so the types of the arguments following these optional arguments must be
“promoted” in order to pass the Closure Compiler’s type-check. This is most
pronounced in <span class=CodeChar>dojo.connect</span> for which many arguments
can be omitted.</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=590
 style='width:6.15in;margin-left:23.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=108 valign=top style='width:81.0pt;border-top:2.25pt;border-left:
  2.25pt;border-bottom:1.0pt;border-right:1.0pt;border-color:windowtext;
  border-style:solid;background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Function</b></p>
  </td>
  <td width=192 valign=top style='width:2.0in;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>File &amp; line number</b></p>
  </td>
  <td width=290 valign=top style='width:217.8pt;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Comments</b></p>
  </td>
 </tr>
 <tr>
  <td width=108 valign=top style='width:81.0pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo._getText</p>
  </td>
  <td width=192 valign=top style='width:2.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/_loader/<br>
  hostenv_browser.js:253</p>
  </td>
  <td width=290 valign=top style='width:217.8pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Argument #2 should be marked optional.</p>
  </td>
 </tr>
 <tr>
  <td width=108 valign=top style='width:81.0pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo.connect</p>
  </td>
  <td width=192 valign=top style='width:2.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/connect.js:82</p>
  </td>
  <td width=290 valign=top style='width:217.8pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Handle optional arguments in the front by promoting types
  from the back to the front.</p>
  </td>
 </tr>
 <tr>
  <td width=108 valign=top style='width:81.0pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo.publish</p>
  </td>
  <td width=192 valign=top style='width:2.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/connect.js:257</p>
  </td>
  <td width=290 valign=top style='width:217.8pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Argument #2 should be marked optional.</p>
  </td>
 </tr>
 <tr>
  <td width=108 valign=top style='width:81.0pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo.subscribe</p>
  </td>
  <td width=192 valign=top style='width:2.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/connect.js:225</p>
  </td>
  <td width=290 valign=top style='width:217.8pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Handle optional argument #2 by promoting types from argument
  #3 to #2.</p>
  </td>
 </tr>
 <tr>
  <td width=108 valign=top style='width:81.0pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 2.25pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo.Stateful</p>
  </td>
  <td width=192 valign=top style='width:2.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/Stateful.js:71</p>
  </td>
  <td width=290 valign=top style='width:217.8pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Handle optional argument #1 by promoting types from
  argument #2 to #1.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<b><i><span style='font-size:14.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc287429525">Eliminate property accesses via string value</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=Notes>Notes:  These properties are accessed via string value in very
few places, so it is worthwhile to rewrite them.</p>

<p class=Notes>&nbsp;</p>

<p class=Notes>Alternative: Provide externs to prevent renaming of these
properties.</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=588
 style='width:441.0pt;margin-left:23.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=188 valign=top style='width:141.1pt;border-top:2.25pt;border-left:
  2.25pt;border-bottom:1.0pt;border-right:1.0pt;border-color:windowtext;
  border-style:solid;background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>File &amp; line number</b></p>
  </td>
  <td width=400 valign=top style='width:299.9pt;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Comments</b></p>
  </td>
 </tr>
 <tr>
  <td width=188 valign=top style='width:141.1pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/browser.js:17</p>
  <p class=MsoNormal>dojo/i18n.js: 245</p>
  </td>
  <td width=400 valign=top style='width:299.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Eliminate <span class=CodeChar>dojo[“require”]</span>
  (which is a trick used to avoid the loader loading the dependency) by
  defining a variable.</p>
  </td>
 </tr>
 <tr>
  <td width=188 valign=top style='width:141.1pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/i18n.js:138,149</p>
  </td>
  <td width=400 valign=top style='width:299.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Eliminate <span class=CodeChar>dojo[“provide”]</span>
  (which is a trick used to avoid the loader loading the dependency) by
  defining a variable.</p>
  </td>
 </tr>
 <tr>
  <td width=188 valign=top style='width:141.1pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/html.js:1845</p>
  </td>
  <td width=400 valign=top style='width:299.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Eliminate references to “<span class=CodeChar>addClass</span>”
  and “<span class=CodeChar>removeClass</span>” via an if-statement.</p>
  </td>
 </tr>
 <tr>
  <td width=188 valign=top style='width:141.1pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 2.25pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/Deferred.js:180</p>
  </td>
  <td width=400 valign=top style='width:299.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Eliminate references to “<span class=CodeChar>reject</span>”
  and “<span class=CodeChar>resolve</span>” via an if-statement.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429526">Other Necessary Code modifications</a></h2>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=590
 style='width:6.15in;margin-left:23.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=168 valign=top style='width:1.75in;border-top:2.25pt;border-left:
  2.25pt;border-bottom:1.0pt;border-right:1.0pt;border-color:windowtext;
  border-style:solid;background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Function</b></p>
  </td>
  <td width=168 valign=top style='width:1.75in;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>File &amp; line number</b></p>
  </td>
  <td width=254 valign=top style='width:2.65in;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Comments</b></p>
  </td>
 </tr>
 <tr>
  <td width=168 valign=top style='width:1.75in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo.version.toString()</p>
  </td>
  <td width=168 valign=top style='width:1.75in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/_loader/<br>
  bootstrap:258</p>
  </td>
  <td width=254 valign=top style='width:2.65in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>“<span class=CodeChar>with</span>” keyword is not
  supported by the Closure Compiler.</p>
  </td>
 </tr>
 <tr>
  <td width=168 valign=top style='width:1.75in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo.parser.instantiate()</p>
  </td>
  <td width=168 valign=top style='width:1.75in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/parser.js:232,258</p>
  </td>
  <td width=254 valign=top style='width:2.65in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Add support for property name maps.</p>
  </td>
 </tr>
 <tr>
  <td width=168 valign=top style='width:1.75in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 2.25pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>“handlers” hash</p>
  </td>
  <td width=168 valign=top style='width:1.75in;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/xhr.js:<br>
  240-305</p>
  </td>
  <td width=254 valign=top style='width:2.65in;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Change all property names to <i>quoted</i> – because <span
  class=CodeChar>dojo.xhr</span>* functions map the <span class=CodeChar>handleAs</span>
  parameter (passed as string) to a property of this hash to get a handler
  function.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/parser.js</span> line 232, 258:</p>

</div>

<p class=MsoNormal>Add support for property name maps by reverse-mapping the
parameter’s short name to its original full name in order to search for
attributes with the full name.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This function is defined inside a closure, impossible to
override later on – so it is necessary to modify the source.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Starting from line 232 – Create a new “<span class=CodeChar>extra</span>”
object that contains the same parameters but in mangled property names:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeStart(&quot;closure&quot;,
kwArgs.closure);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>if
(false)</p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeEnd(&quot;closure&quot;);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>{</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        var
newextra = {};</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        for
(var propname in extra) {</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                newextra[closureMapPropertyName(clsInfo.cls,
propname)] = extra[propname];</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        }</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        extra
= newextra;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>}      </p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Starting from line 258 – Reverse-map the mangled property
names of the class to the un-mangled “full” name and check whether those
attributes exist in the node:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
fullname = name;</p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeStart(&quot;closure&quot;, kwArgs.closure);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>if
(false)</p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeEnd(&quot;closure&quot;);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>{
fullname = closureMapPropertyName(clsInfo.cls, name, true); }</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>var item = name in mixin ? { value:mixin[name],
specified:true } :</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                                                                                attributes.getNamedItem(</span>fullname<span
style='color:gray'>);</span></p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc287429527">Necessary Modifications to Dijit’s</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Using Dijit modules usual involves providing the correct
extern symbols to the Closure Compiler to avoid renaming of properties. This
can either be done by scanning through the code tree, or by trial-and-error
(usually errors).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The author has not used most of <span class=CodeChar>dijit</span>
(outside of <span class=CodeChar>dijit.Dialog</span>) to know what changes need
to be made (any volunteers?).</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429528">Eliminate property accesses via string value</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=Notes>Notes:  These properties are accessed via string value in very
few places, so it is worthwhile to rewrite them.</p>

<p class=Notes>&nbsp;</p>

<p class=Notes>Alternative: Provide externs to prevent renaming of these
properties.</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=588
 style='width:441.0pt;margin-left:23.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=188 valign=top style='width:141.1pt;border-top:2.25pt;border-left:
  2.25pt;border-bottom:1.0pt;border-right:1.0pt;border-color:windowtext;
  border-style:solid;background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>File &amp; line number</b></p>
  </td>
  <td width=400 valign=top style='width:299.9pt;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Comments</b></p>
  </td>
 </tr>
 <tr>
  <td width=188 valign=top style='width:141.1pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 2.25pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dijit/_base/wai.js:31</p>
  </td>
  <td width=400 valign=top style='width:299.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Eliminate references to “<span class=CodeChar>addClass</span>”
  and “<span class=CodeChar>removeClass</span>” by converting the call to <span
  class=CodeChar>dojo.toggleClass()</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429529">Handle templated widgets</a></h2>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=590
 style='width:6.15in;margin-left:23.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=192 valign=top style='width:2.0in;border-top:2.25pt;border-left:
  2.25pt;border-bottom:1.0pt;border-right:1.0pt;border-color:windowtext;
  border-style:solid;background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Function</b></p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>File &amp; line number</b></p>
  </td>
  <td width=194 valign=top style='width:145.8pt;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Comments</b></p>
  </td>
 </tr>
 <tr>
  <td width=192 valign=top style='width:2.0in;border-top:none;border-left:solid windowtext 2.25pt;
  border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dijit._Templated.prototype.<br>
  _attachTemplateNodes</p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dijit/_Templated.js:183-212</p>
  </td>
  <td width=194 valign=top style='width:145.8pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>See below.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/Templated.js</span> line 183-212</p>

</div>

<p class=MsoNormal>Widgets based on the <span class=CodeChar>dijit._Templated</span>
class generate properties based on the “<span class=CodeChar>dojoAttachPoint</span>”
(or “<span class=CodeChar>data&#8209;dojo&#8209;attach&#8209;point</span>”) and
“<span class=CodeChar>dojoAttachEvent</span>” (or “<span class=CodeChar>data&#8209;dojo&#8209;attach&#8209;event</span>”)
attributes in the template HTML that must be mapped back to the mangled name.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>It is necessary that the function <span class=CodeChar>dijit._Templated.prototype._attachTemplateNodes</span>
be changed in <span class=CodeChar>dijit._Templated</span> instead of being
overridden in <span class=CodeChar>closure.js</span> because some <span
class=CodeChar>dijit</span> classes mix in <span class=CodeChar>dijit._Templated</span>
but not as the main base class – which means that this function gets copied to
the new class’s prototype.</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>if(attachPoint){</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        var point, points = attachPoint.split(/\s*,\s*/);</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        while((point = points.shift())){</span></p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeStart(&quot;closure&quot;,
kwArgs.closure);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                if
(false)</p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeEnd(&quot;closure&quot;);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                {
point = closureMapPropertyName(this.constructor, point, true); }</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                if(dojo.isArray(this[point])){</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                        this[point].push(baseNode);</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                }else{</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                        this[point]=baseNode;</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                }</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                this._attachPoints.push(point);</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        }</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>}</span></p>

<p class=CodeBlock align=center style='margin:0in;margin-bottom:.0001pt;
text-align:center;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock align=center style='margin:0in;margin-bottom:.0001pt;
text-align:center;background:#E9FFFF'>:</p>

<p class=CodeBlock align=center style='margin:0in;margin-bottom:.0001pt;
text-align:center;background:#E9FFFF'>:</p>

<p class=CodeBlock align=center style='margin:0in;margin-bottom:.0001pt;
text-align:center;background:#E9FFFF'>:</p>

<p class=CodeBlock align=center style='margin:0in;margin-bottom:.0001pt;
text-align:center;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>if(event.indexOf(&quot;:&quot;) != -1){</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>// oh, if only JS had tuple assignment</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        var funcNameArr = event.split(&quot;:&quot;);</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        event = trim(funcNameArr[0]);</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        thisFunc = trim(funcNameArr[1]);</span></p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeStart(&quot;closure&quot;,
kwArgs.closure);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        if
(false)</p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeEnd(&quot;closure&quot;);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        {
</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                event
= closureMapPropertyName(this.constructor, event, true); </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                thisFunc
= closureMapPropertyName(this.constructor, thisFunc, true); </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        }</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>}else{</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        event = trim(event);</span></p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeStart(&quot;closure&quot;,
kwArgs.closure);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        if
(false)</p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeEnd(&quot;closure&quot;);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        {
event = closureMapPropertyName(this.constructor, event, true); }</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>}</span></p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc287429530">Necessary Modifications to dojox.mobile</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The author only used a very limited subset of <span
class=CodeChar>dojox.mobile</span> and none of the other <span class=CodeChar>dojox</span>
modules (any volunteers for the rest?).</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429531">Eliminate properties passed/created by string</a></h2>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=588
 style='width:441.0pt;margin-left:23.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=238 valign=top style='width:178.15pt;border-top:2.25pt;border-left:
  2.25pt;border-bottom:1.0pt;border-right:1.0pt;border-color:windowtext;
  border-style:solid;background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>File &amp; line number</b></p>
  </td>
  <td width=350 valign=top style='width:262.85pt;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Comments</b></p>
  </td>
 </tr>
 <tr>
  <td width=238 valign=top style='width:178.15pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojox/mobile/scrollable.js:544,582</p>
  </td>
  <td width=350 valign=top style='width:262.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Properties accessed via string – replace with if-statements
  conditioned on “<span class=CodeChar>dir</span>”.</p>
  </td>
 </tr>
 <tr>
  <td width=238 valign=top style='width:178.15pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojox/mobile/_base.js:532</p>
  </td>
  <td width=350 valign=top style='width:262.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Eliminate <span class=CodeChar>dojo[“require”]</span>
  (which is a trick used to avoid the loader loading the dependency) by
  defining a variable.</p>
  </td>
 </tr>
 <tr>
  <td width=238 valign=top style='width:178.15pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojox/mobile/_base.js:830-831</p>
  </td>
  <td width=350 valign=top style='width:262.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Events should be named “<span class=CodeChar>ontouchstart</span>”
  and “<span class=CodeChar>onmousedown</span>” instead of versions without the
  “<span class=CodeChar>on</span>” prefix.</p>
  </td>
 </tr>
 <tr>
  <td width=238 valign=top style='width:178.15pt;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 2.25pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojox/mobile/_base.js:859-860</p>
  </td>
  <td width=350 valign=top style='width:262.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Events should be named “<span class=CodeChar>ontouchmove</span>”
  and “<span class=CodeChar>ontouchend</span>” instead of versions without the
  “<span class=CodeChar>on</span>” prefix.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-size:16.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></b>

<h1><a name="_Toc287429532">Recommended Modifications to Dojo Core, Dijit and
Dojox</a></h1>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429533">Enable hard-coding of browser sniffing results</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The Closure Compiler can eliminate dead code if it detects
that certain variables are constants and that such blocks of code can never be
reached. This is especially useful in removing browser-specific code sections.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>For example, when compiling an application for WebKit-based
mobile browsers, it customary to run Dojo Build with the “<span class=CodeChar>webkitMobile</span>”
flag, which excludes a lot of IE-specific and FireFox-specific code, in
addition to removing some wrapper closures (but not all).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Running Dojo Build with the “<span class=CodeChar>closure</span>”
flag automatically creates the following global constants:</p>

<p class=MsoNormal style='margin-left:.5in'>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@const */ var ISIE;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@const */ var ISFF;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@const */ var ISAIR;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@const */ var ISWEBKIT;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@const */ var ISOPERA;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@const */ var ISKHTML;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@const */ var ISCHROME;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@const */ var ISMAC;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@const */ var ISMOZ;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@const */ var ISMOZILLA;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>/**
@type {number} */ var ISSAFARI;</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>and replaces all references to <span class=CodeChar>dojo.isWebKit</span>
with <span class=CodeChar>ISWEBKIT</span>, <span class=CodeChar>dojo.isIE</span>
with <span class=CodeChar>ISIE</span>, <span class=CodeChar>dojo.isFF</span>
with <span class=CodeChar>ISFF</span>, etc. Therefore, all conditional
statements depending on these browser-sniffing variables will be replaced by
accesses to the corresponding global constants.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following section of code in <span class=CodeChar>dojo/_base/_loader/hostenv_browser.js</span>
is changed to allow for hard-coding of these browser-detection variables:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeStart(&quot;webkitMobile&quot;,
kwArgs.webkitMobile);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>if(dua.indexOf(&quot;Opera&quot;) &gt;= 0){ d.isOpera = tv;
}</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>if(dua.indexOf(&quot;AdobeAIR&quot;) &gt;= 0){ d.isAIR = 1;
}</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>d.isKhtml = (dav.indexOf(&quot;Konqueror&quot;) &gt;= 0) ?
tv : 0;</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>d.isWebKit = parseFloat(dua.split(&quot;WebKit/&quot;)[1])
|| undefined;</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>d.isMac = dav.indexOf(&quot;Macintosh&quot;) &gt;= 0;</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>if
(false)</p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeEnd(&quot;webkitMobile&quot;);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>{</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        d.isOpera
= 0;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        d.isAIR
= 0;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        d.isWebKit
= 1;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        d.isKhtml
= 0;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        d.isMac
= false;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        //
We leave isChrome alone because it is also WebKit-based</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>}</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>d.isChrome = parseFloat(dua.split(&quot;Chrome/&quot;)[1])
|| undefined;</span></p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This change, for example, replaces browser-sniffing calls
with hard-coded values when “<span class=CodeChar>webkitMobile</span>” is
defined for the Build. Other hard-coded browser constant sections can be added
in a similar way.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When the output source file is processed by the Closure
Compiler, all sections of code conditional upon <span class=CodeChar>dojo.isIE</span>,
<span class=CodeChar>dojo.isOpera</span>, <span class=CodeChar>dojo.isFF</span>
etc. will automatically be removed as dead code, while conditionals depending
upon <span class=CodeChar>dojo.isWebKit</span> will be in-lined.</p>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc287429534">Eliminate Top-Level Aliases</a></h2>

<p class=MsoNormal>&nbsp;</p>

<p class=Notes>Notes:  Avoid passing in <span class=CodeChar>dojo</span>, <span
class=CodeChar>dijit</span> and <span class=CodeChar>dojox</span> as argument
to any function. One such usage creates an “alias” which prevents the Closure
Compiler from optimizing anything underneath those objects.</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=588
 style='width:441.0pt;margin-left:23.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=216 valign=top style='width:2.25in;border-top:2.25pt;border-left:
  2.25pt;border-bottom:1.0pt;border-right:1.0pt;border-color:windowtext;
  border-style:solid;background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>File &amp; line number</b></p>
  </td>
  <td width=372 valign=top style='width:279.0pt;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Comments</b></p>
  </td>
 </tr>
 <tr>
  <td width=216 valign=top style='width:2.25in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/_loader/<br>
  bootstrap.js:169-194</p>
  </td>
  <td width=372 valign=top style='width:279.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Dojo Core is used, so there is no need to reassign <span
  class=CodeChar>dojo</span>, <span class=CodeChar>dijit</span> and <span
  class=CodeChar>dojox</span> – which will prevent namespace flattening.</p>
  <p class=MsoNormal>&nbsp;</p>
  <p class=MsoNormal>“<span class=CodeChar>d</span>” and “<span class=CodeChar>_d</span>”
  are automatically provided as <span class=CodeChar>goog.scope</span> aliases
  to “<span class=CodeChar>dojo</span>”, so these separate local variable
  definitions should be removed.</p>
  <p class=MsoNormal>&nbsp;</p>
  <p class=MsoNormal>Also, if <span class=CodeChar>dojo._scopeArgs</span> is
  not used (should be true in a build) it should be removed to avoid creating aliases.</p>
  <p class=MsoNormal>&nbsp;</p>
  <p class=MsoNormal>It is suggested that the entire block be removed via an <span
  class=CodeChar>excludeStart</span>/<span class=CodeChar>excludeEnd</span>
  section.</p>
  </td>
 </tr>
 <tr>
  <td width=216 valign=top style='width:2.25in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/_loader/<br>
  hostenv_browser.js:88</p>
  <p class=MsoNormal>dojo/_base/_loader/loader.js:7</p>
  <p class=MsoNormal>dojo/_base/Color.js:5</p>
  <p class=MsoNormal>dojo/_base/declare.js:4</p>
  <p class=MsoNormal>dojo/_base/fx.js:9</p>
  <p class=MsoNormal>dojo/_base/html.js:90</p>
  <p class=MsoNormal>dojo/_base/lang.js:4</p>
  <p class=MsoNormal>dojo/_base/NodeList.js:6</p>
  <p class=MsoNormal>dojo/_base/xhr.js:6</p>
  <p class=MsoNormal>dojo/fx.js:10</p>
  <p class=MsoNormal>dojo/html.js:9</p>
  <p class=MsoNormal>dojo/parser.js:9</p>
  <p class=MsoNormal>dojo/robot.js:21,65</p>
  <p class=MsoNormal>dojo/uacss.js:14</p>
  <p class=MsoNormal>dijit/_WidgetBase.js:373</p>
  <p class=MsoNormal>dijit/_Widget.js:389</p>
  </td>
  <td width=372 valign=top style='width:279.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Remove “<span class=CodeChar>d = dojo;</span>” and “_<span
  class=CodeChar>d = dojo;</span>” (via an <span class=CodeChar>excludeStart</span>/<span
  class=CodeChar>excludeEnd</span> section) since everything in Dojo Core should
  be wrapped by a <span class=CodeChar>goog.scope</span> with “<span
  class=CodeChar>d</span>” and “<span class=CodeChar>_d</span>” aliased to “<span
  class=CodeChar>dojo</span>”.<a href="#_ftn6" name="_ftnref6" title=""><span
  class=MsoFootnoteReference><span class=MsoFootnoteReference><span
  style='font-size:12.0pt;font-family:"Times New Roman"'>[6]</span></span></span></a></p>
  <p class=MsoNormal>&nbsp;</p>
  <p class=MsoNormal>The need for these should go away when Dojo moved to real AMD
  modules format.</p>
  </td>
 </tr>
 <tr>
  <td width=216 valign=top style='width:2.25in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/_loader/<br>
  hostenv_browser.js:326</p>
  </td>
  <td width=372 valign=top style='width:279.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Remove the statement “<span class=CodeChar>d = null;</span>”
  via an <span class=CodeChar>excludeStart</span>/<span class=CodeChar>excludeEnd</span>
  section.</p>
  </td>
 </tr>
 <tr>
  <td width=216 valign=top style='width:2.25in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/html.js: 1079</p>
  </td>
  <td width=372 valign=top style='width:279.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Rewrite to remove “<span class=CodeChar> … in d ? …</span>”
  in order to avoid blocking optimization of the entire <span class=CodeChar>dojo</span>
  tree.</p>
  </td>
 </tr>
 <tr>
  <td width=216 valign=top style='width:2.25in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/i18n.js</p>
  </td>
  <td width=372 valign=top style='width:279.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Change code to avoid loading resource bundles from the <span
  class=CodeChar>dojo._loadedModules</span> hash – which is eliminated by the
  special Build process to avoid creating aliases.</p>
  </td>
 </tr>
 <tr>
  <td width=216 valign=top style='width:2.25in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/_loader/loader.js</p>
  <p class=MsoNormal>dijit/_base/focus.js</p>
  <p class=MsoNormal>dijit/_base/wai.js</p>
  </td>
  <td width=372 valign=top style='width:279.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Replace <span class=CodeChar>dojo.mixin</span> calls with
  individual assignments to the <span class=CodeChar>dijit</span> object –
  using <span class=CodeChar>dojo.mixin</span> creates an alias to <span
  class=CodeChar>dijit</span> that prevents flattening of the <span
  class=CodeChar>dijit</span> namespace.</p>
  </td>
 </tr>
 <tr>
  <td width=216 valign=top style='width:2.25in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 2.25pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojox/mobile/<br>
  scrollable.js:61-66</p>
  </td>
  <td width=372 valign=top style='width:279.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Remove (via an <span class=CodeChar>excludeStart</span>/<span
  class=CodeChar>excludeEnd</span> section) the if-statement and everything in
  the else clause because Dojo Core is used and there is no need to reassign <span
  class=CodeChar>dojo</span> and <span class=CodeChar>dojox</span> – which will
  prevent namespace flattening.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/html.js</span><span
class=CodeChar><span style='font-weight:normal'> line 1079</span></span><b>:</b></p>

</div>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>dojo._isBodyLtr = function(){</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        return
(d._bodyLtr === undefined) ? </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                d._bodyLtr = (d.body().dir ||
d.doc.documentElement.dir || &quot;ltr&quot;)</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                        .toLowerCase() == &quot;ltr&quot; //
Boolean</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        : d._bodyLtr;</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>};</span></p>

</div>

<p class=MsoNormal>&nbsp;</p>

<b><i><span style='font-size:14.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc287429535">Eliminate property accesses via string value</a></h2>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=588
 style='width:441.0pt;margin-left:23.4pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=168 valign=top style='width:1.75in;border-top:2.25pt;border-left:
  2.25pt;border-bottom:1.0pt;border-right:1.0pt;border-color:windowtext;
  border-style:solid;background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>File &amp; line number</b></p>
  </td>
  <td width=420 valign=top style='width:315.0pt;border-top:solid windowtext 2.25pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  background:black;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>Comments</b></p>
  </td>
 </tr>
 <tr>
  <td width=168 valign=top style='width:1.75in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 1.0pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/array.js:<br>
  255-264</p>
  </td>
  <td width=420 valign=top style='width:315.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>For <span class=CodeChar>webkitMobile</span> builds,
  several <span class=CodeChar>dojo</span> array functions (e.g. <span
  class=CodeChar>forEach</span>) are remapped to native versions on the <span
  class=CodeChar>Array</span> prototype. Properties are added to the <span
  class=CodeChar>dojo</span> object by string names – dangerous but in this
  case harmless due to these keywords being standard externs in the Closure
  Compiler. However, none of these functions can be virtualized.</p>
  <p class=MsoNormal>&nbsp;</p>
  <p class=MsoNormal>The whole block should be rewritten to assign these
  functions directly to the properties of the <span class=CodeChar>dojo</span>
  object.</p>
  </td>
 </tr>
 <tr>
  <td width=168 valign=top style='width:1.75in;border-top:none;border-left:
  solid windowtext 2.25pt;border-bottom:solid windowtext 2.25pt;border-right:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dojo/_base/NodeList.js:231-244</p>
  </td>
  <td width=420 valign=top style='width:315.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 2.25pt;border-right:solid windowtext 2.25pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Some functions in <span class=CodeChar>NodeList</span> map
  to their <span class=CodeChar>dojo</span> counterparts.</p>
  <p class=MsoNormal>&nbsp;</p>
  <p class=MsoNormal>The whole section should be rewritten to assign these
  functions directly from the properties of the <span class=CodeChar>dojo</span>
  object instead of using string property access.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/array.js</span> lines
255-264:</p>

</div>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeStart(&quot;webkitMobile&quot;,
kwArgs.webkitMobile);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>if
(false)</p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeEnd(&quot;webkitMobile&quot;);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>{</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>[&quot;indexOf&quot;, &quot;lastIndexOf&quot;,
&quot;forEach&quot;, &quot;map&quot;, &quot;some&quot;, &quot;every&quot;,
&quot;filter&quot;].forEach(</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        function(name, idx){</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                var
proto = Array.prototype[name];</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                var
func = <span style='color:gray'>function(/*Array*/arr, /*Function|String*/callback,
/*Object?*/thisObj){</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                        if((idx &gt; 1) &amp;&amp; (typeof
callback == &quot;string&quot;)){</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                                callback = new
Function(&quot;item&quot;, &quot;index&quot;, &quot;array&quot;, callback);</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                        }</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                        return proto.call(arr, callback,
thisObj);</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                };</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                switch
(idx) {</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                        case
0: dojo.indexOf = func; break;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                        case
1: dojo.lastIndexOf = func; break;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                        case
2: dojo.forEach = func; break;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                        case
3: dojo.map = func; break;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                        case
4: dojo.some = func; break;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                        case
5: dojo.every = func; break;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                        case
6: dojo.filter = func; break;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                }</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        });</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>}</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<span style='font-size:12.0pt;font-family:"Times New Roman"'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/NodeList.js</span> lines 231-244</p>

</div>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.slice
= function(){ return this._wrap(ap.slice.apply(this, arguments), this); };</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.splice
= function(){ return this._wrap(ap.splice.apply(this, arguments), null); };</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>//
concat should be here but some browsers with native NodeList have problems with
it</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>//
add array.js redirectors</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.indexOf=function(){return
d.indexOf.apply(null, </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                                                [this].concat(aps.call(arguments,
0))); };</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.lastIndexOf=function(){return
d.lastIndexOf.apply(null, </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                                                [this].concat(aps.call(arguments,
0))); };</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.every=function(){return
d.every.apply(null, </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                                                [this].concat(aps.call(arguments,
0))); };</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.some=function(){return
d.some.apply(null, </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                                                [this].concat(aps.call(arguments,
0))); };</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>//
add conditional methods</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.attr
= adaptWithCondition(dojo.attr, magicGuard);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.style
= adaptWithCondition(dojo.style, magicGuard);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>//
add forEach actions</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.connect
= adaptAsForEach(dojo.connect);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.addClass
= adaptAsForEach(dojo.addClass); </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.removeClass
= adaptAsForEach(dojo.removeClass); </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.replaceClass
= adaptAsForEach(dojo.replaceClass); </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.toggleClass
= adaptAsForEach(dojo.toggleClass);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.empty
= adaptAsForEach(dojo.empty);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>nlp.removeAttr
= adaptAsForEach(dojo.removeAttr);</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-size:16.0pt;font-family:Arial'><br clear=all
style='page-break-before:always'>
</span></b>

<h1><a name="_Toc287429536">Going All The Way – More Risky Modifications to
Remove “dojo” Itself</a></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In order to flatten the “<span class=CodeChar>dojo</span>”
root namespace itself, the modifications involved are more significant. They
are outlined below.</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid windowtext 3.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:black;margin-left:9.0pt;margin-right:9.1pt'>

<p class=MsoNormal align=center style='text-align:center;background:black;
border:none;padding:0in'><b>WARNING!!!</b></p>

<p class=MsoNormal style='background:white;border:none;padding:0in'>Apply these
modifications at your own risk. They are less than trivial changes and must go
through extensive testing to ensure that they are safe. </p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/_loader/loader.js</span>: 248
(<span class=CodeChar>dojo.addOnLoad</span>)</p>

</div>

<p class=MsoNormal><span class=CodeChar>dojo.addOnLoad</span> does not appear
to depend on “<span class=CodeChar>this</span>” pointing to “<span
class=CodeChar>dojo</span>”. Pass <span class=CodeChar>null</span> as first
argument to the <span class=CodeChar>apply</span>/<span class=CodeChar>call</span>
function to avoid creating an alias to “<span class=CodeChar>dojo</span>”.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/_loader/loader.js</span>:
512 (<span class=CodeChar>dojo.platformRequire</span>)</p>

</div>

<p class=MsoNormal><span class=CodeChar>dojo._loadModule</span> does not appear
to depend on “<span class=CodeChar>this</span>” pointing to “<span
class=CodeChar>dojo</span>”. Pass <span class=CodeChar>null</span> as first
argument to <span class=CodeChar>apply</span> in order to avoid creating an
alias to “<span class=CodeChar>dojo</span>”.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/_loader/loader.js</span>:
533 (<span class=CodeChar>dojo.requireIf</span>)</p>

</div>

<p class=MsoNormal><span class=CodeChar>dojo.require</span> does not appear to
depend on “<span class=CodeChar>this</span>” pointing to “<span class=CodeChar>dojo</span>”.
Pass <span class=CodeChar>null</span> as first argument to <span
class=CodeChar>apply</span> in order to avoid creating an alias to “<span
class=CodeChar>dojo</span>”.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection style='margin-left:0in;text-indent:0in;background:#E6E6E6'><span
class=CodeChar>dojo/_base/_loader/bootstrap.js</span>: 453 (<span
class=CodeChar>dojo.eval</span>)<br>
<span class=CodeChar>dojo/_base/_loader/loader.js</span>: 116 (<span
class=CodeChar>dojo._loadUri</span>)</p>

</div>

<p class=MsoNormal>Rewrite <span class=CodeChar>dojo[“eval”]</span> as <span
class=CodeChar>dojo.eval</span> in order to avoid creating an alias to “<span
class=CodeChar>dojo</span>”.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/fx.js</span>: 602 </p>

</div>

<p class=MsoNormal><span class=CodeChar>dojo.style</span> does not appear to
depend on “<span class=CodeChar>this</span>” pointing to “<span class=CodeChar>dojo</span>”.
Pass <span class=CodeChar>null</span> as first argument to <span
class=CodeChar>apply</span> in order to avoid creating an alias to “<span
class=CodeChar>dojo</span>”.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/lang.js</span>: 122 (<span
class=CodeChar>dojo.hitch</span>)</p>

</div>

<p class=MsoNormal>Nobody really calls <span class=CodeChar>dojo.hitch</span> without
a starting scope, expecting it to be “<span class=CodeChar>dojo</span>” itself…</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Pass <span class=CodeChar>null</span> as first argument to <span
class=CodeChar>apply</span> in order to avoid creating an alias to “<span
class=CodeChar>dojo</span>”.</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid windowtext 3.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:black;margin-left:9.0pt;margin-right:9.1pt'>

<p class=MsoNormal align=center style='text-align:center;background:black;
border:none;padding:0in'><b>WARNING!!!</b></p>

<p class=MsoNormal style='background:white;border:none;padding:0in'>This will
break strange code such as: <span class=CodeChar>dojo.hitch(null, “connect”, …)</span><a
href="#_ftn7" name="_ftnref7" title=""><span class=MsoFootnoteReference><span
class=MsoFootnoteReference><span style='font-size:12.0pt;font-family:"Times New Roman"'>[7]</span></span></span></a>
because it has more than 2 arguments and thus gets passed to <span
class=CodeChar>dojo._hitchArgs()</span> which should then make the scope object
to be “<span class=CodeChar>dojo</span>” when it sees the <span class=CodeChar>null</span>.
This will no longer happen after compilation because the “<span class=CodeChar>dojo</span>”
object may be removed.</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/lang.js</span>: 230 (<span
class=CodeChar>dojo.partial</span>)</p>

</div>

<p class=MsoNormal>It is not necessary to call <span class=CodeChar>dojo.hitch</span>
with a context due to modifications in <span class=CodeChar>dojo/_base/lang.js</span>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Pass <span class=CodeChar>null</span> as first argument to <span
class=CodeChar>apply</span> in order to avoid creating an alias to “<span
class=CodeChar>dojo</span>”.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/Deferred.js</span>: 293,
297, 301</p>

</div>

<p class=MsoNormal>It is not necessary to call <span class=CodeChar>dojo.hitch</span>
with a context due to modifications in <span class=CodeChar>dojo/_base/lang.js</span>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Pass <span class=CodeChar>null</span> as first argument to <span
class=CodeChar>apply</span> in order to avoid creating an alias to “<span
class=CodeChar>dojo</span>”.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/_base/NodeList.js</span>: 301</p>

</div>

<p class=MsoNormal>Rewrite to reference to “<span class=CodeChar>dojo.string</span>”
in order to avoid blocking optimization of everything under <span
class=CodeChar>dojo.string</span>. Does this rewrite work:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>var
templateFunc = content.templateFunc;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>try
{</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        if
(!templateFunc) templateFunc = dojo.string.substitute;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>}
catch (e) {</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        templateFunc
= null;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>}</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dojo/parser.js</span>: 80-82 (<span
class=CodeChar>dojo.parser</span><span class=CodeChar><span style='font-family:
"Times New Roman";font-weight:normal'> constructor</span></span>)</p>

</div>

<p class=MsoNormal><span class=CodeChar>dojo.connect</span> is called on <span
class=CodeChar>dojo.extend</span>, creating an alias to “<span class=CodeChar>dojo</span>”.
Does this rewrite work:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeStart(&quot;closure&quot;,
kwArgs.closure);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        d.connect(d, &quot;extend&quot;, function(){</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                instanceClasses = {};</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        });</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        if
(false)</p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeEnd(&quot;closure&quot;);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        {</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                var
origfunc = d.extend;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                d.extend
= function(/*Object*/ constructor, /*Object...*/ props) {</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                        origfunc.apply(null,
arguments);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                        instanceClasses
= {};</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                }</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        }</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid gray 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;background:
#E6E6E6'>

<p class=CodeSection><span class=CodeChar>dijit/_Widget.js</span>: 8-13 (<span
class=CodeChar><span style='font-family:"Times New Roman";font-weight:normal'>deferred
connects</span></span>)</p>

</div>

<p class=MsoNormal><span class=CodeChar>dojo.connect</span> is called on <span
class=CodeChar>dojo._connect</span>, creating an alias to “<span
class=CodeChar>dojo</span>”. Does this rewrite work:</p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:solid silver 1.0pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
background:#E9FFFF;margin-left:.25in;margin-right:27.35pt'>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeStart(&quot;closure&quot;,
kwArgs.closure);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>dojo.connect(dojo, &quot;_connect&quot;,</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        function(/*dijit._Widget*/ widget, /*String*/
event){</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                if(widget &amp;&amp;
dojo.isFunction(widget._onConnect)){</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                        widget._onConnect(event);</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>                }</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'><span
style='color:gray'>        });</span></p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>&nbsp;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>if
(false)</p>

<p class=StyleCodeBlockSeaGreen style='margin:0in;margin-bottom:.0001pt;
background:#E9FFFF'>//&gt;&gt;excludeEnd(&quot;closure&quot;);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>{</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        var
origfunc = dojo._connect; </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        dojo._connect
= function(obj, event, context, method) {</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                var
retvalue = origfunc.apply(null, arguments);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                if(obj
&amp;&amp; dojo.isFunction(obj._onConnect)) {</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                        obj._onConnect(event);</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                }</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                </p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>                return
retvalue;</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>        };</p>

<p class=CodeBlock style='margin:0in;margin-bottom:.0001pt;background:#E9FFFF'>}</p>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

</div>

<div><br clear=all>

<hr align=left size=1 width="33%">

<div id=ftn1>

<p class=MsoFootnoteText><a href="#_ftnref1" name="_ftn1" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:10.0pt;font-family:"Times New Roman"'>[1]</span></span></span></a>
This may get frustrating for users new to the Closure Compiler. The author has
faced a case that, when using an external third-party library, the object
passed into <span class=CodeChar>addEventHandler</span> was discovered to have
been completely removed by the Closure Compiler as dead code because it thinks
that the object’s only property, <span class=CodeChar>handleEvent</span>, is
never used! Of course, this reflects poorly on the people maintaining the
Closure Compiler, but we have to take what we get…</p>

</div>

<div id=ftn2>

<p class=MsoFootnoteText><a href="#_ftnref2" name="_ftn2" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:10.0pt;font-family:"Times New Roman"'>[2]</span></span></span></a>
Also, writing code sprinkled with dollar signs makes it looks more like jQuery
or Prototype than Dojo – and if you want your programs to look like jQuery
code, you probably should be using jQuery anyway.</p>

</div>

<div id=ftn3>

<p class=MsoFootnoteText><a href="#_ftnref3" name="_ftn3" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:10.0pt;font-family:"Times New Roman"'>[3]</span></span></span></a>
Don’t worry about such long function names. The Closure Compiler will shorten
it to a one-character name.</p>

</div>

<div id=ftn4>

<p class=MsoFootnoteText><a href="#_ftnref4" name="_ftn4" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:10.0pt;font-family:"Times New Roman"'>[4]</span></span></span></a>
The global variable is named <span class=CodeChar>closurePropertyNamesMap</span>.
Obviously, this name should be avoided in user code!</p>

</div>

<div id=ftn5>

<p class=MsoFootnoteText><a href="#_ftnref5" name="_ftn5" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:10.0pt;font-family:"Times New Roman"'>[5]</span></span></span></a>
Don’t worry about such long function names. The Closure Compiler will shorten
it to a one-character name.</p>

</div>

<div id=ftn6>

<p class=MsoFootnoteText><a href="#_ftnref6" name="_ftn6" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:10.0pt;font-family:"Times New Roman"'>[6]</span></span></span></a>
Some of these statements are already removed by the <span class=CodeChar>webkitMobile</span>
Build flag, but not all.</p>

</div>

<div id=ftn7>

<p class=MsoFootnoteText><a href="#_ftnref7" name="_ftn7" title=""><span
class=MsoFootnoteReference><span class=MsoFootnoteReference><span
style='font-size:10.0pt;font-family:"Times New Roman"'>[7]</span></span></span></a>
However, if the user writes strange code like this (I can’t think of a valid
use case where he/she cannot pass in “<span class=CodeChar>dojo</span>” as the
first argument) and expects to compile this with the Closure Compiler under <i>Advanced</i>
mode, he/she absolutely <b>deserves</b> this to be done to him/her!</p>

</div>

</div>

</body>

</html>
